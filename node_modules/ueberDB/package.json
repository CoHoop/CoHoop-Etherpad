{
  "name": "ueberDB",
  "description": "transform every database into a object key value store",
  "url": "https://github.com/Pita/ueberDB",
  "keywords": [
    "database",
    "keyvalue"
  ],
  "author": {
    "name": "Peter 'Pita' Martischka",
    "email": "petermartischka@googlemail.com"
  },
  "dependencies": {
    "mysql": "0.9.5",
    "dirty": "0.9.6",
    "async": "0.1.15",
    "channels": "0.0.2"
  },
  "devDependencies": {
    "log4js": "0.4.1"
  },
  "main": "./CloneAndAtomicLayer",
  "version": "0.1.7",
  "readme": "#About\n\nueberDB is a abstraction layer for databases. It turns every database into a simple key value store, at the moment we only support mysql and sqlite. ueberDB uses a smart cache and buffer algorithm to make databases faster. Reads are cached and writes are done in a bulk. The bulk writing reduces the overhead of a database transaction.\n\n#Install\n\n`npm install ueberDB`\n\n#Example\n\n<pre>\nvar ueberDB = require(\"ueberDB\");\n\n//mysql\nvar db = new ueberDB.database(\"mysql\", {\"user\":\"root\", host: \"localhost\", \"password\":\"\", database: \"store\"});\n//sqlite in-memory\n//var db = new ueberDB.database(\"sqlite\");\n//sqlite in file\n//var db = new ueberDB.database(\"sqlite\", {filename:\"var/sqlite3.db\"});\n//sqlite in file with a write interval of a half second\n//var db = new ueberDB.database(\"sqlite\", {filename:\"var/sqlite3.db\"}, {writeInterval: 500});\n\n//initialize the database\ndb.init(function (err)\n{\n  if(err) \n  {\n    console.error(err);\n    process.exit(1);\n  }\n\n  //set a object as a value\n  //can be done without a callback, cause the value is immediately in the buffer\n  db.set(\"valueA\", {a:1,b:2});\n  \n  //get the object\n  db.get(\"valueA\", function(err, value){\n    console.log(value);\n    \n    db.close(function(){\n      process.exit(0);\n    });\n  });\n});\n</pre>\n\n#How to add support for another database\nLook at sqlite_db.js and mysql_db.js, your module have to provide the same functions. Call it DATABASENAME_db.js and reimplement the functions for your database. If you think it works, test it with `node benchmark.js DATABASENAME`. Benchmark.js is benchmark and test at the same time. It tries to set 100000 values. You can pipe stderr to a file and will create a csv with benchmark results.\n\n#License \nis Apache v2\n",
  "_id": "ueberDB@0.1.7",
  "_from": "ueberDB@0.1.7"
}
